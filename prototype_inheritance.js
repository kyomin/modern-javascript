// 자바스크립트 프로토타입 상속

// [1]: 자바스크립트는 객체지향 언어인가?
// 그렇다 --> 다만 다른 언어와는 달리 프로토타입 상속에 기반을 둔 OOP 언어 --> Class 문법이 지원 --> 다른 언어와 비슷
// 프로토타입 상속을 이해하기 위해서는 --> 앞서 배운 내용들에 선학습이 잘 되어있어야 한다.

// [2]: 상속의 필요성
// 가장 큰 목적 --> 재사용
// 이미 부모쪽에서 정의된 속성과 메서드를 그대로 물려받아 재사용할 수 있다. --> 큰 장점
// 뿐만 아니라, 새로운 기능을 추가해서 기존 기능에서 더 확장시킬 수도 있다.
// 한마디로, 중복해서 또 작성하지 않아서 좋고, 필요에 따라서는 더 확장도 가능

// [3]: 프로토타입 체인
// __proto__ --> 상속을 해준 부모(원형)를 가리킴(참조)
// 이 말은 자식 객체가 __proto__가 가리키는 부모 객체의 멤버(속성, 메서드)를 사용할 수 있다. --> 즉, 상속 받았다.
let obj1 = {
	name: '홍길동',
	age: 20,
	sayHi: function () {
		console.log('hi ' + this.name);
	},
};

let obj2 = {
	name: '이순신',
};

// obj2객체의 __proto__ 속성이 가리키는 것은?
console.log(obj2); // Object(최상위). 최상위 객체는 Object는 더 이상 가리킬 곳이 없어 null을 가리킨다.
console.log(obj2.name); // 이순신

// 그러면 __proto__ 속성이 가리키는 것을 바꿀 수 있는가? --> Yes!
obj2.__proto__ = obj1; // __proto__가 가리키는 부모를 obj1으로 바꾼다.
console.log(obj2); // obj1이 부모가 되었다. --> obj1이 가지는 멤버를 사용할 수 있게 됨
console.log(obj2.name); // 이순신 --> 얘가 출력된 이유는 obj2 객체 내에 name 속성이 있으니까 부모까지 찾으러 안 가고 출력
console.log(obj2.age); // 20 --> 얘가 출력된 이유는 obj2 객체 내에 age 속성이 없으니까 부모까지 찾아 올라감
obj2.sayHi(); // hi 이순신 --> 호출하는 주체가 obj2이므로 sayHi 메서드 내의 this.name을 가장 먼저 찾게 되는 자신의 name 속성을 출력한 것이다.
console.log('----------------------------------------');

// [4]: 빈 객체 생성 후 --> __proto__ 속성에 원하는 객체(부모 또는 원형이 될)를 할당 --> 상속
let obj3 = {};

// 지금 상태의 obj3 객체의 원형(부모)은? --> Object(최상위, Object.prototype) --<> Object의 부모는 null
console.log(obj3);

// 그런데 여기서 obj3의 부모(원형)를 바꾸면?
// obj3 -> obj2 -> obj1 -> Object의 체인(상속) 관계가 형성된다.
// 즉, obj2의 부모(원형)인 obj1의 멤버까지 모두 상속을 받아 이용할 수 있게 된다.
obj3.__proto__ = obj2;

// hasOwnProperty --> 최상위 객체인 Object가 가지고 있는 속성이므로 사용 가능하다.
console.log(obj3.hasOwnProperty('test')); // false
console.log(obj3.name); // 이순신
console.log(obj3.age); // 20
obj3.sayHi(); // hi 이순신 --> 호출하는 주체가 obj3이므로 sayHi 메서드 내의 this.name을 가장 먼저 찾게 되는 obj2의 name 속성을 출력한 것이다.

// 정리
// 1. 위 실습을 통해서 알 수 있듯이 자바스크립트는 자신에게 없는 특성(속성, 메서드)을 __proto__가 가리키는 원형(부모)에서 가져온다.
// 2. 이때, 맨 하위 자식 객체에서부터 순차적으로 연결되어있는 원형을 찾아간다. --> '프로토타입 체인'
// 3. 즉, __proto__ 속성이 가리키는 원형(부모)이 바로 상속을 해준 부모 <-- 이 객체를 해당 객체의 프로토타입(원형)이라고 한다.
// 4. 이와 같이 자바스크립트는 '프로토타입 체인'을 사용하여 객체의 특성(속성, 메서드)을 다른 객체로 전파 --> '프로토타입 상속'
// 5. '프로토타입 상속'으로 구현하는 객체지향 언어를 --> '프로토타입 기반의 객체지향 언어'
